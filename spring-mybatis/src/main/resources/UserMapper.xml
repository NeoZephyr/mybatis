<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pain.mapper.UserMapper">

    <!--简单查询-->
    <resultMap id="UserMap" type="com.pain.pojo.User">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="email" property="email" />
        <result column="birth" property="birth" jdbcType="TIMESTAMP" />
    </resultMap>

    <select id="selectByIdWithType" parameterType="int" resultType="user">
        select * from user where id = #{id}
    </select>

    <select id="selectByIdWithMap" parameterType="int" resultMap="UserMap">
        select * from user where id = #{id}
    </select>

    <select id="selectByUsernameAndEmail" parameterType="map" resultType="user">
        select * from user where username = #{username}
        and email = #{email}
    </select>

    <!--插入数据-->
    <!--这种会写主键的方法只适用于支持主键自增的数据库-->
    <insert id="insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        insert into user
        (username, password, email, birth)
        values
        (#{username}, #{password}, #{email}, #{birth})
    </insert>

    <insert id="insertUserCand" parameterType="user">
        insert into user
        (username, password, email, birth)
        values
        (#{username}, #{password}, #{email}, #{birth})
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!--where + if 标签-->
    <select id="selectByUser" resultType="com.pain.pojo.User">
        select * from user
        <where>
            <if test="username != null and username != ''">
                and username like '%${username}%'
            </if>
            <if test="email != null and email != ''">
                and email = #{email}
            </if>
        </where>
    </select>

    <!--where + choose 标签-->
    <!--otherwise 防止所有条件都不满足时查询出所有用户-->
    <select id="selectByIdOrUsername" resultType="com.pain.pojo.User">
        select * from user
        <where>
            <choose>
                <when test="id != null">
                    and id = #{id}
                </when>
                <when test="username != null and username != ''">
                    and username = #{username}
                </when>
                <otherwise>
                    and 1 = 2
                </otherwise>
            </choose>
        </where>
    </select>

    <!--set 标签-->
    <update id="updateByIdSelective">
        update user
        <set>
            <if test="username != null and username != ''">
                username = #{username},
            </if>
            <if test="email != null and email != ''">
                email = #{email},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>

    <!--foreach 标签-->
    <select id="selectByIdList" resultType="com.pain.pojo.User">
        select * from user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </select>

    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id">
        insert into user
        (username, password, email, birth)
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.username},
            #{user.password},
            #{user.email},
            #{user.birth}
            )
        </foreach>
    </insert>

    <update id="updateByMap">
        update user
        set
        <foreach collection="user" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{user.id}
    </update>

    <!--参数名称必须为 value-->
    <select id="selectByUsername" parameterType="string" resultType="user">
        select * from user where username like '%${value}%'
    </select>

    <!--bind 预防 SQL 注入-->
    <select id="selectByUsernameCand" parameterType="string" resultType="user">
        <bind name="usernameLike" value="'%' + username + '%'" />
        select * from user where username like #{usernameLike}
    </select>



    <!--一对多-->
    <resultMap id="UserWithRole1" type="com.pain.pojo.UserExt">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="email" property="email" />
        <result column="birth" property="birth" />

        <collection property="roles" ofType="Role" columnPrefix="role_">
            <id column="id" property="id" />
            <result column="name" property="name" />
        </collection>
    </resultMap>

    <resultMap id="RoleMap" type="com.pain.pojo.Role">
        <id column="id" property="id" />
        <result column="name" property="name" />
    </resultMap>

    <resultMap id="UserWithRole2" type="com.pain.pojo.UserExt" extends="UserMap">
        <collection property="roles" columnPrefix="role_" resultMap="RoleMap" />
    </resultMap>

    <select id="selectUserWithRoleByUserId1" resultMap="UserWithRole1">
        select
          u.id,
          u.username,
          u.password,
          u.email,
          u.birth,
          r.id role_id,
          r.name role_name
          from user u
          inner join user_role ur on u.id = ur.user_id
          inner join role r on r.id = ur.role_id
          where u.id = #{userId}
    </select>

    <select id="selectUserWithRoleByUserId2" resultMap="UserWithRole2">
        select
        u.id,
        u.username,
        u.password,
        u.email,
        u.birth,
        r.id role_id,
        r.name role_name
        from user u
        inner join user_role ur on u.id = ur.user_id
        inner join role r on r.id = ur.role_id
        where u.id = #{userId}
    </select>

    <resultMap id="privilegeMap" type="com.pain.pojo.Privilege">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="url" column="url" />
    </resultMap>

    <resultMap id="roleWithPrivilegeMap" type="com.pain.pojo.RoleExt" extends="RoleMap">
        <collection property="privileges" columnPrefix="privilege_" resultMap="privilegeMap" />
    </resultMap>

    <resultMap id="UserWithRole3" type="com.pain.pojo.UserExt" extends="UserMap">
        <collection property="roles" columnPrefix="role_" resultMap="roleWithPrivilegeMap" />
    </resultMap>

    <select id="selectUserWithRoleByUserId3" resultMap="UserWithRole3">
        select
        u.id,
        u.username,
        u.password,
        u.email,
        u.birth,
        r.id role_id,
        r.name role_name,
        p.id role_privilege_id,
        p.name role_privilege_name,
        p.url role_privilege_url
        from user u
        inner join user_role ur on u.id = ur.user_id
        inner join role r on r.id = ur.role_id
        inner join role_privilege rp on r.id = rp.role_id
        inner join privilege p on rp.privilege_id = p.id
        where u.id = #{userId}
    </select>


    <!--一对多之嵌套查询-->
    <select id="selectPrivilegeByRoleId" resultMap="privilegeMap">
        select
        p.id,
        p.name,
        p.url
        from privilege p
        inner join role_privilege rp
        on rp.privilege_id = p.id
        where rp.role_id = #{roleId}
    </select>

    <resultMap id="roleWithPrivilege" type="com.pain.pojo.RoleExt" extends="RoleMap">
        <!--roleId 是 select 指定查询方法中的参数-->
        <!--id 是当前查询 selectRoleByUserId 查询出的角色的 id-->
        <collection property="privileges" fetchType="lazy" column="{roleId=id}"
                    select="selectPrivilegeByRoleId" />
    </resultMap>

    <select id="selectRoleByUserId" resultMap="roleWithPrivilege">
        select
        r.id,
        r.name
        from role r
        inner join user_role ur on ur.role_id = r.id
        where ur.user_id = #{userId}
    </select>

    <resultMap id="userWithRole" type="com.pain.pojo.UserExt" extends="UserMap">
        <collection property="roles" fetchType="lazy" column="{userId=id}"
                    select="selectRoleByUserId" />
    </resultMap>

    <select id="selectUserById" resultMap="userWithRole">
        select
        u.id,
        u.username,
        u.password,
        u.email,
        u.birth
        from user u
        where u.id = #{userId}
    </select>

    <!--自动映射处理一对一-->
    <select id="selectOrderById" resultType="com.pain.pojo.Order">
        select
          o.id,
          o.total,
          u.id as "user.id",
          u.username as "user.username",
          u.password as "user.password",
          u.email as "user.email",
          u.birth as "user.birth"
        from `order` o
        inner join user u on o.user_id = u.id
        where o.id = #{orderId}
    </select>

    <!--可能会产生 N + 1 问题-->
    <resultMap id="OrderWithUserMap1" type="com.pain.pojo.Order">
        <id column="id" property="id" />
        <id column="total" property="total" />

        <association column="user_id" property="user" javaType="com.pain.pojo.User"
                     select="selectById" fetchType="lazy" />
    </resultMap>

    <select id="selectOrderByIdCand1" resultMap="OrderWithUserMap1">
        select id, total, user_id
        from `order`
        where id = #{orderId}
    </select>

    <resultMap id="OrderMap" type="com.pain.pojo.Order">
        <id column="id" property="id" />
        <id column="total" property="total" />
    </resultMap>

    <resultMap id="OrderWithUserMap2" type="com.pain.pojo.Order" extends="OrderMap">
        <association property="user" columnPrefix="user_" resultMap="UserMap" />
    </resultMap>

    <select id="selectOrderByIdCand2" resultMap="OrderWithUserMap2">
        select
          o.id,
          o.total,
          u.id user_id,
          u.username user_username,
          u.password user_password,
          u.email user_email,
          u.birth user_birth
        from `order` o
        inner join user u on o.user_id = u.id
        where o.id = #{orderId}
    </select>

</mapper>